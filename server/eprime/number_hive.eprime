language ESSENCE' 1.0

$ Number Hive is a game with a hexagonal grid split into blocks. 
$ Each block must contain each of the numbers 1-the size of that block exactly once, 
$ and no neighbours may contain the same number

given height: int(1..)
letting heightdim be domain int(1..height)
given length: int(1..)
letting lengthdim be domain int(1..length)
given numblocks: int
given blocks: matrix indexed by [lengthdim, heightdim] of int(0..numblocks)
given fixed: matrix indexed by [lengthdim, heightdim] of int(0..height*length)

$#VAR grid
find grid: matrix indexed by [lengthdim, heightdim] of int(0..height*length)

such that

$ Transfer non empty boxes in the input grid to the output grid
forAll x: lengthdim.
    forAll y: heightdim.
        fixed[x,y] != 0 -> grid[x,y]=fixed[x,y],

$ If a box in the 2d grid does not represent a hexagon in the hexagonal grid, its value is 0 and it will not be shown
forAll x: lengthdim.
    forAll y: heightdim.
        blocks[x,y] = 0 -> grid[x,y]=0,

$ Ensure that each block contains each of the numbers 1-the size of that block exactly once
forAll i: int(1..numblocks).
    forAll j: int(1..sum([1 | x:lengthdim, y:heightdim, blocks[x,y]=i])).
        exists x:lengthdim. exists y:heightdim.
            grid[x,y]=j /\ blocks[x,y]=i,

$ Ensures that no neighbours contain the same number
forAll x: lengthdim.
    forAll y: heightdim.
            (
                !(x+1 <= length /\ grid[x,y]=grid[x+1,y]) /\
                !(y+1 <= height /\ grid[x,y]=grid[x,y+1]) /\
                (x % 2 = 1 -> !(x+1 <= length /\ y-1 > 0/\ grid[x,y]=grid[x+1,y-1])) /\
                (x % 2 = 0 -> !(x+1 <= length /\ y+1 <= height /\ grid[x,y]=grid[x+1,y+1]))
            )
            $Boxes which are not part of the hexagonal grid are exempt
            \/
            grid[x,y]=0 